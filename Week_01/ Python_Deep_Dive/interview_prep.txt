Python Interview Questions (4 Years Experience)

â¸»

1. Core Python Concepts
	â€¢	Difference between deepcopy and shallow copy? When to use each?
	â€¢	Explain Pythonâ€™s memory management (reference counting, garbage collection, __del__).
	â€¢	What are mutable vs immutable objects? Why are strings immutable?
	â€¢	Explain decorators. Can you write a decorator to log execution time of a function?
	â€¢	What are generators? Difference between yield and return.
	â€¢	Explain __new__ vs __init__. When would you override __new__?
	â€¢	Difference between is and == in Python.
	â€¢	How does Pythonâ€™s with statement (context managers) work internally (__enter__, __exit__)?

â¸»

2. Object-Oriented Programming
	â€¢	Explain difference between class method, static method, and instance method.
	â€¢	What is multiple inheritance in Python? How does MRO (Method Resolution Order) work?
	â€¢	How do you implement abstract classes in Python? (using abc module)
	â€¢	Difference between __str__ and __repr__.
	â€¢	What are dunder methods (__iter__, __len__, __call__)? Give real use cases.

â¸»

3. Concurrency & Parallelism
	â€¢	What is the Global Interpreter Lock (GIL)? How does it affect multithreading?
	â€¢	When would you use threading, multiprocessing, and asyncio?
	â€¢	How does concurrent.futures simplify parallel execution?
	â€¢	Write code to fetch 100 URLs using:
	â€¢	Threads
	â€¢	AsyncIO
Compare performance.

â¸»

4. Data Structures & Algorithms in Python
	â€¢	Difference between list, tuple, set, dict in terms of performance.
	â€¢	Time complexity of:
	â€¢	list.append(), list.pop(), list.insert(0, x)
	â€¢	dict.get(), dict.update(), in check for dict
	â€¢	How does Python implement hash tables internally for dictionaries?
	â€¢	Implement an LRU cache using OrderedDict.
	â€¢	How would you remove duplicates from a list while preserving order?

â¸»

5. Advanced Topics
	â€¢	Explain Pythonâ€™s memory model for large integers and strings (interning).
	â€¢	What are coroutines in Python? Difference from generators.
	â€¢	Explain metaclasses in Python. When would you use them?
	â€¢	What are slots (__slots__) in Python classes? Benefits?
	â€¢	How does Python handle function annotations and type hints? (typing module, Pydantic)

â¸»

6. Error Handling & Best Practices
	â€¢	Difference between Exception, BaseException, and Error.
	â€¢	When should you use finally block?
	â€¢	Write a custom exception class and show how to use it.
	â€¢	What are best practices for error handling in production code?

â¸»

7. Libraries & Tools
	â€¢	Have you worked with NumPy, Pandas, PySpark, Flask/FastAPI, SQLAlchemy, Pytest?
	â€¢	Write a simple Flask/FastAPI endpoint that accepts a file upload.
	â€¢	How do you test a Python function using pytest?
	â€¢	Explain @dataclass â€” when would you use it over normal classes?

â¸»

8. System Design + Python Application
	â€¢	How would you design a Python service that processes files from S3, runs some computation, and stores results in a DB?
	â€¢	How do you package a Python project for deployment? (setup.py, requirements.txt, virtualenv, Docker)
	â€¢	What are your strategies for debugging performance bottlenecks? (profiling tools: cProfile, memory_profiler)

â¸»

9. Coding / Problem Solving Questions
	â€¢	Implement a function to check if a string is a palindrome, ignoring spaces/punctuation.
	â€¢	Find the first non-repeating character in a string.
	â€¢	Merge two sorted lists without using built-in sort.
	â€¢	Write code to implement producer-consumer using queue.Queue.
	â€¢	Given a list of log entries [timestamp, user_id], return the user who logged in most frequently.
	â€¢	Write a function to flatten a nested list (e.g., [1, [2, [3, 4]], 5] â†’ [1,2,3,4,5]).

â¸»

10. Behavioral / Experience-based
	â€¢	Tell me about a time you optimized a Python pipeline for performance. What did you change?
	â€¢	How do you ensure code quality in a team project? (linting, testing, CI/CD)
	â€¢	Describe a bug you fixed that required deep Python knowledge.
	â€¢	How do you keep up with changes in Python (new versions, features)?

â¸»

ðŸ“Œ Practice Questions (Self-test)
	1.	Write a decorator that retries a function 3 times if it raises an exception.
	2.	Implement a generator for Fibonacci numbers.
	3.	Implement a thread-safe counter with threading.Lock.
	4.	Write code to parse a huge JSON file line by line without loading it fully in memory.
	5.	Build a mini-REST API in FastAPI with a GET /users/{id} endpoint.
	6.	Implement an async function that fetches data from 10 URLs concurrently.
	7.	Write a class using @dataclass for an Employee (id, name, dept) and show how to sort by dept.

â¸»

ðŸ‘‰ For 4 years experience, interviewers expect:
	â€¢	Fluency in Python features (decorators, generators, context managers).
	â€¢	Practical concurrency knowledge (when to use threads vs processes vs async).
	â€¢	System thinking (deploying apps, debugging performance, working with databases/APIs).
	â€¢	Clean code habits (testing, exceptions, type hints).